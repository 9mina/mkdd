#ifndef DEMOTIMEKEEPER_H
#define DEMOTIMEKEEPER_H

#include "JSystem/JUtility/TColor.h"
#include "types.h"

class DemoTimeKeeper
{ // Autogenerated
    // Global
public:
    DemoTimeKeeper(bool); // 0x801cec88
    // vtable 0x80397b54
    virtual void reset();                          // 0x801cecdc
    virtual void calc();                           // 0x801ced20
    virtual bool isStartFadeIn() { return true; }; // 0x801c7678
    virtual int requestDemoCameraID() const { return -1; }
    virtual bool isPlayingEndingWinAnm() const { return false; };

    // Inline
    bool isDemoEnd() const { return mDemoEnd; }
    bool isDispInfo() { return mDispFlags != 0; }
    void updateCutTimer() { mCutTimer++; }      // 0x801cf1ec
    s32 getCutTimer() const { return mCutTimer; }   // 0x801cf234
    u32 getCurCutName() const { return mCutName; }  // 0x801cf23c
    void setDemoEnd() { mDemoEnd = true; }          // 0x801cf514
    s32 getCurCutTime() const { return mCurCutTime; } // 0x801cfc94
    u32 getDemoCameraTagName() const { return mCutName; }
private:
    bool mStaffRoll;
    u16 mDispFlags;
    s16 _8;
    s16 mCamId;
    s32 mCutTimer;
    u32 mCutName; // maybe this is u32? however the comparisions are cmpw
    s32 mCurCutTime;
    char mName[5];
    bool mDemoEnd;
}; // class DemoTimeKeeper
// Size: 0x20

class AwardDemoTimeKeeper : public DemoTimeKeeper
{
public:
    AwardDemoTimeKeeper();                   // 0x801cee8c
    virtual void reset();                    // 0x801ceee0
    virtual void calc();                     // 0x801cef28
    void checkEventHanabi(short);            // 0x801cf244
    void doOpening();                        // 0x801cf2ec
    void startEventPaper();                  // 0x801cf388
    void doPark();                           // 0x801cf3dc
    void doFront();                          // 0x801cf41c
    void doEnding();                         // 0x801cf420
    void doNext();                           // 0x801cf540
    void jumpEndingCut();                    // 0x801cf600
    void stopAllKart();                      // 0x801cf658
    void fadeOutSE();                        // 0x801cf6bc
    virtual int requestDemoCameraID() const; // 0x801cf700
    static s16 sEventTimeHanabi1;            // 0x80414770
    static s16 sEventTimeHanabi2;            // 0x80414772
    static s16 sEventTimeHanabi3;            // 0x80414774
    static s16 sEventTimeHanabi4;            // 0x80414776
    static s16 sEventTimeHanabi5;            // 0x80414778
    static s16 sEventTimeHanabi6;            // 0x8041477a
    static s16 sEventTimeHanabi7;            // 0x8041477c
    static s16 sEventTimeHanabi8;            // 0x8041477e
    static s16 sEventTimePaper;              // 0x80414780
    static s16 sEventTimeStart2D;            // 0x80414782
private:
    s16 mEventTime;
    u16 _22;
    bool _24;
    bool _25;
    bool _26;
    bool mPaperEventStarted;
}; // Size 0x28

class StaffRollTimeKeeper : public DemoTimeKeeper
{
public:
    StaffRollTimeKeeper();
    virtual void reset();
    virtual void calc();
    virtual bool isStartFadeIn() { return false; } // 0x801d0cf4
    virtual int requestDemoCameraID() const;
    virtual bool isPlayingEndingWinAnm() const { return _24 != 0; };

    void jump();
    void setLastBlanking(int);
    bool isKartAppearanceFrame();
    bool checkCreditStart(int, long);
    void setupCreditMask(int);
    void warpKart(u16);
    void setBlurColor(const JUTColor &blurColor);
    void doOpening();
    void doMarioTitle();
    void doExecProducer();
    void doProducer();
    void doChiefDirector();
    void doDirector();
    void doProgramDirector();
    void doProgram();
    void doDesignManager();
    void doCourseDesign();
    void doGraphicDesign();
    void doScreenDesign();
    void doMusic();
    void doVoice();
    void doProgress();
    void doDebugSupport();
    void doSpecial();
    void doLocalization();
    void doLast();

    // Inline
    bool isEnableJump() const { return _20 != 0; } // 0x801cfaec
    bool isJumpedEnd() const { return mJumpFlag != 0; } // 0x801cfafc
    bool isFirstFrame() const { return getCutTimer() == 0; } // 0x801d00cc

    static s32 sKartAppearancePreTime;
    static f32 sKartMaxSpeed;
    static s32 sStartTitleCreditTime;
    static s32 sStartExectiveProducerCreditTime;
    static s32 sStartProducerCreditTime;
    static s32 sStartChiefDirectorCreditTime;
    static s32 sStartDirectorCreditTime;
    static s32 sStartProgramDirectorCreditTime;
    static s32 sStartProgramCreditTime;
    static s32 sStartDesignManagerCreditTime;
    static s32 sStartCourseDesignCreditTime;
    static s32 sStartGraphicDesignCreditTime;
    static s32 sStartScreenDesignCreditTime;
    static s32 sStartMusicCreditTime;
    static s32 sStartVoiceCreditTime;
    static s32 sStartProgressCreditTime;
    static s32 sStartDebugSupportCreditTime;
    static s32 sStartSpecialCreditTime;
    static s32 sStartLocalizationCreditTime;
    static s32 sStartLastCreditTime;
    static JUTColor sBlurTitleColor;
    static JUTColor sBlurExProducerColor;
    static JUTColor sBlurProducerColor;
    static JUTColor sBlurChiefDirectorColor;
    static JUTColor sBlurDirectorColor;
    static JUTColor sBlurProgramDirectorColor;
    static JUTColor sBlurProgramColor;
    static JUTColor sBlurDesignManagerColor;
    static JUTColor sBlurCourseDesignColor;
    static JUTColor sBlurGraphicDesignColor;
    static JUTColor sBlurScreenDesignColor;
    static JUTColor sBlurMusicColor;
    static JUTColor sBlurVoiceColor;
    static JUTColor sBlurProgressColor;
    static JUTColor sBlurDebugSupportColor;
    static JUTColor sBlurSpecialColor;
    static JUTColor sBlurLocalizationColor;
    static JUTColor sBlurLastColor;
private:
    u16 _20;
    u16 mJumpFlag;
    u16 _24;
    JUTColor mBlurColor;
    int _2c;
    s16 _30;
}; // Size 0x34

#endif // DEMOTIMEKEEPER_H
