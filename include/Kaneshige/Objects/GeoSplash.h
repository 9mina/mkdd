#ifndef GEOSPLASH_H
#define GEOSPLASH_H

#include "JSystem/J3D/J3DModel.h"
#include "JSystem/JKernel/JKRDisposer.h"
#include "JSystem/JSupport/JSUList.h"
#include "Kaneshige/Course/CrsData.h"
#include "Sato/GeographyObj.h"
#include "Sato/StateObserver.h"

class GeoSplash;

class GeoSplashSupervisor : GeoObjSupervisor, JKRDisposer {
public:
    GeoSplashSupervisor();
    virtual ~GeoSplashSupervisor(); // 0x801d1a9c

    void reset();
    void calc();
    void entry(GeoSplash *);
    GeoSplash *search(u8);
private:
    JSUList<GeoSplash> mList;
};

class GeoSplash : public GeographyObj, public StateObserver { // Autogenerated
public:
    GeoSplash(const CrsData::SObject &); // 0x801d1d20
    void reset(); // 0x801d1e54
    void calc(); // 0x801d1f58
    f32 getSurfaceHeight(); // 0x801d2104
    void initFuncWait(); // 0x801d210c
    void doFuncWait(); // 0x801d2110
    void InitExec(); // 0x801d1f9c
    void MoveExec();// 0x801d20b0


    // Inline
    bool isSameID(u8 id) const { return mObjData->mParam1 == id; } // 0x801d1cb8

    //virtual ~GeoSplash() {} // 0x801d2114
    void initClassCreateNum() { sSupervisorCreateNum = 0; } // 0x801d2190
    int getSplashID() const { return mObjData->mParam2; }

    virtual GeoSplashSupervisor *getSupervisor() { return sSupervisor; }
    static GeoSplashSupervisor *getSupervisor() { return sSupervisor; }

    friend class GeoSplashSupervisor;
private:
    static StateFuncSet<GeoSplash> sTable[1]; // 0x80397cd0
    static u16 sSupervisorCreateNum; // 0x80416560
    static GeoSplashSupervisor *sSupervisor; // 0x80416564
    // Unused
    static int sCreateNum;

    JSULink<GeoSplash> mLink;
    JGeometry::TVec3f mFrDir;
    JGeometry::TVec3f mUpDir;
    JGeometry::TVec3f mLfDir;
}; // class GeoSplash

#endif // GEOSPLASH_H
