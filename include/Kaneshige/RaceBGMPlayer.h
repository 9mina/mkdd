#ifndef RACEBGMPLAYER_H
#define RACEBGMPLAYER_H

#include "types.h"

class RaceBGMPlayer
{ // Autogenerated
  // Global
public:
    RaceBGMPlayer();             // 0x801c6da0
    void reset();                // 0x801c6dd0
    u32 getCrsDemoBGMLabel();    // 0x801c6e64
    u32 getRaceStartBGMLabel();  // 0x801c6eac
    void calc();                 // 0x801c6f84
    u32 getGoalBGMLabel();       // 0x801c72e0
    static s16 sCrsBGMDelayTime; // 0x804146f0
    // Inline/Unused
    // void stop();
    // Inline
    void stopCrsDemo() { mFlags |= 4; }                // 0x801c6e54
    bool isMiniGameEnd() const { return mFlags & 16; } // 0x801c7288
    bool isLastTime() const { return mFlags & 8; }     // 0x801c7294
    bool isExecPrepare() const { return mFlags & 32; } // 0x801c72a0
    bool isPlay() const { return mFlags & 2; }         // 0x801c72ac
    void execPrepare() { mFlags |= 32; }               // 0x801c72b8
    bool isPrepare() const { return mFlags & 1; };     // 0x801c72c8
    bool isCrsDemoEnd() const { return mFlags & 4; }   // 0x801c72d4

    void setLowestKartNo(int kartNo)
    {
        if (mLowestKartNo < 0)
            mLowestKartNo = kartNo;
    };
    void setGoalKartNo(int kartNo)
    {
        if (mGoalKartNo < 0)
            mGoalKartNo = kartNo;
    };
    void setFinalLapKartNo(int kartNo) { mFinalLapKartNo = kartNo; };

private:
    u32 mState;
    u16 mFlags;
    s16 mDelay;
    s16 mFinalLapKartNo;
    s16 mGoalKartNo;
    s16 mLowestKartNo;
    bool _e;
}; // class RaceBGMPlayer
// void RaceMgr::isRaceModeVs() const // RaceMgr.h; // 0x801c6f2c
// void RaceMgr::isRaceModeTA() const // RaceMgr.h; // 0x801c6f58
#endif // RACEBGMPLAYER_H