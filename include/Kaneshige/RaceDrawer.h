#ifndef RACEDRAWER_H
#define RACEDRAWER_H

#include "JSystem/J2D/J2DGrafContext.h"
#include "JSystem/JUtility/TColor.h"
#include "Kaneshige/Blurscreen.h"
#include "Kaneshige/DrawBuffer.h"
#include "Kaneshige/KartDrawer.h"
#include "Kaneshige/GhostScreen.h"
#include "Kaneshige/MaskScreen.h"
#include "Osako/shadowScr.h"
#include "Shiraiwa/ZCaptureMgr.h"
#include "kartEnums.h"
#include "types.h"

class RaceDrawer
{ // Autogenerated
public:
    // Global
    RaceDrawer(u16, bool);                     // 0x801c8f24
    void reset();                              // 0x801c9534
    void initJ3D();                            // 0x801c9660
    void drawSceneFirstStage(u32);             // 0x801c9698
    void drawMidScene();                       // 0x801c9dfc
    void drawSceneSecondStage(u32);            // 0x801c9f0c
    bool drawPreScene();                       // 0x801ca29c
    void drawPostScene();                      // 0x801ca32c
    void drawGhost();                          // 0x801ca4b8
    void showAllGhost();                       // 0x801ca680
    static u8 sBlurA0;                         // 0x80414700
    static u8 sBlurDefaultDecrease;            // 0x80414701
    static f32 sBlurAddY;                      // 0x80414704
    static f32 sBlurAddX;                      // 0x80416488
    static JUTColor sBlurDefaultColor;         // 0x8041648c
    static EGhostKind sForceGhostKind;         // 0x80416490
    
    // Inline
    bool isDrawSky() const { return mDrawFlags & 0x1; }
    bool isDrawCrs() const { return mDrawFlags & 0x2; }
    bool isDrawGeoObj() const { return mDrawFlags & 0x4; }
    bool isDrawCup() const { return mDrawFlags & 0x8; }
    bool isDrawKart() const { return mDrawFlags & 0x10; }
    bool isDrawDriver() const { return mDrawFlags & 0x20; }
    bool isDrawJugem() const { return mDrawFlags & 0x40; }
    bool isDrawItem() const { return mDrawFlags & 0x80; }
    bool isDrawGhostScene() const { return mDrawFlags & 0x8000; }

    bool isGhostActive() const { return mGhostScreen != nullptr; }
    bool isBlurActive() const { return mBlurScreen != nullptr; }
    bool isMaskActive() const { return mMaskScreen != nullptr; }

    void setBlurDecrease(u8 a) { mBlurDecrease = a; }
    void setBlurColor(const JUTColor &color) { mBlurColor.set(color);  }

    DrawBuffer *getItemDrawBuffer(int kartNo) {
#line 163
        JUT_MINMAX_ASSERT(-1, kartNo, 8)
        return kartNo >= 0 ? mItmDrawBufs[kartNo] : mItmDrawBuf; // the day Kaneshige discovered ternaries
    }

    KartDrawer *getKartDrawer(int kartNo) {
#line 172
        JUT_MINMAX_ASSERT(0, kartNo, mKartNum);
        return &mKartDrawer[kartNo];
    }

    BlurScreen *getBlurScreen() {  return mBlurScreen; }
    EffectDrawBuffer *getEffectDrawBuffer() {return mEfctDrawBuf; }
    FeelDrawBuffer *getFeelDrawBuffer() { return mFeelDrawBuf; }
    JugemDrawBuffer *getJugemDrawBuffer() { return mJugemDrawBuf; }
    GeoDrawBuffer *getGeoDrawBuffer() { return mGeoDrawBuf; }
    ShadowGeoDrawBuffer *getShadowGeoDrawBuffer() { return mShdwDrawBuf; }
    MaskScreen *getMaskScreen() { return mMaskScreen; }
private:
    J2DOrthoGraph *mOrtho;
    s16 _4;
    u16 mDrawFlags;
    ShadowGeoDrawBuffer *mShdwDrawBuf;
    GeoDrawBuffer *mGeoDrawBuf;
    ItemDrawBuffer *mItmDrawBufs[8];
    ItemDrawBuffer *mItmDrawBuf;
    EffectDrawBuffer *mEfctDrawBuf;
    JugemDrawBuffer *mJugemDrawBuf;
    FeelDrawBuffer *mFeelDrawBuf;
    int mKartNum;
    KartDrawer *mKartDrawer; // double array?
    BlurScreen *mBlurScreen;
    GhostScreen *mGhostScreen;
    ShadowScreen *mShadowScreen;
    ZCaptureMgr *mCaptureMgr;
    MaskScreen *mMaskScreen;
    u8 mBlurDecrease;
    JUTColor mBlurColor;
    // Size: 0x64
}; // class RaceDrawer

#endif // RACEDRAWER_H
