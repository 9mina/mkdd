#ifndef NETGAMEMGR_H
#define NETGAMEMGR_H

#include "types.h"
#include "dolphin/vi.h"
#include "JSystem/JKernel/JKRHeap.h"
#include "Osako/PadMgr.h"

struct NetPkt;
struct NetPadPkt;
struct SOInAddr;
struct SSDPSearchInfo;

class NetGameMgr
{ // Autogenerated
public:
    enum NetActionType {

    };

    struct NetPkt {

    };
    // Global
    static void create(JKRHeap *);                                               // 0x80205db4
    NetGameMgr();                                                                // 0x80205e00
    void constructFifo();                                                        // 0x80205e28
    void initPadConv();                                                          // 0x80205fd0
    void start();                                                                // 0x80206004
    void end(bool);                                                              // 0x80206134
    void doStart();                                                              // 0x80206198
    void startSearch();                                                          // 0x802061d8
    void doLink();                                                               // 0x80206210
    void finishLink();                                                           // 0x80206408
    void recvLink();                                                             // 0x802065d4
    void recvSync();                                                             // 0x8020677c
    void distributePadData(NetPadPkt &);                                         // 0x802069bc
    void appendPadData(unsigned char, NetPadPkt *);                              // 0x80206b4c
    void recv();                                                                 // 0x80206e50
    void recvTask(void *);                                                       // 0x8020720c
    void sendTask(void *);                                                       // 0x802072e4
    void framework();                                                            // 0x802073a4
    void syncwork();                                                             // 0x802079c4
    static void retraceCallback(u32);                                    // 0x80207c58
    void callbackNotify(const char *, const SOInAddr *);                         // 0x80207c84
    void callbackSearch(const char *, const SOInAddr *, const SSDPSearchInfo *); // 0x80207e2c
    void appendGCInfo(const SOInAddr *);                                         // 0x80207fc0
    void removeGCInfo(const SOInAddr *);                                         // 0x80208078
    void getKartPad(unsigned char, KartPadData *);                               // 0x802080e8
    void getPadData(unsigned char, KartPadData *);                               // 0x80208180
    void adjustFrame();                                                          // 0x80208228
    void progressReadData();                                                     // 0x802083f4
    void fetchPadData();                                                         // 0x80208554
    void sleep();                                                                // 0x80208614
    void awake();                                                                // 0x8020862c
    void handleError();                                                          // 0x80208714
    void initLogBuffer();                                                        // 0x80208868
    void logNet(NetActionType, NetPkt &);                                        // 0x802088d0
    static NetGameMgr *mspNetGameMgr;                                            // 0x80416a10
    // Inline/Unused
    // void getNextConsoleAddr();
    // void sendNext(SendPriority);
    // void broadcast(SendPriority);
    // void resetFifo();
    // void makeLoop();
    // void makeLinkData(NetLinkPkt *);
    // void makeSyncData(NetSyncPkt *);
    // void calcPadPktSize(NetPadPkt &);
    // void makePadData(NetPadPkt *);
    // void makeSleepData(NetSleepPkt *);
    // void makeAwakeData(NetAwakePkt *);
    // void makeHaltData(NetHaltPkt *);
    // void doDHCP();
    // void doAutoIP();
    // void startLink();
    // void doSync();
    // void doPad(SendPriority);
    // void doAwake();
    // void doWaitSleep();
    // void doWaitEnd();
    // void doWaitPad();
    // void doException();
    // void doHalt();
    // void haltNetConsole(ExceptionKind);
    // void recvPad();
    // void storePadData(NetPadPkt &);
    // void recvSleep();
    // void recvAwake();
    // void recvHalt();
    // void startRecvTask();
    // void checkUSN(const char *, UPnPUuid *);
    // void checkSERVER(const char *);
//private:
    u8 _0[0x96c];
    int mState;
    u8 _970[0x1308 - 0x970];
}; // size: 0x1308
#endif // NETGAMEMGR_H