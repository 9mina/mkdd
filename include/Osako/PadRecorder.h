#ifndef PADRECORDER_H
#define PADRECORDER_H

#include "Kaneshige/RaceTime.h"
#include "Osako/kartPad.h"
#include "Osako/KartPadRecord.h"

#define NUM_GHOSTPADS 3
#define NUM_PLAYERPADS 4

class PadRecorder
{ // Autogenerated
public:
    enum PadState
    {
        State_None,
        State_Recording,
        State_PlayBack,
        State_Stopped = State_None
    };

    // Global
    PadRecorder();                             // 0x8020c980
    ~PadRecorder();                            // 0x8020cac4
    void setRecord(int, KartPadRecord *);      // 0x8020cb50
    void setGhostPad(int, KartGamePad *);      // 0x8020cbec
    void setGhostRecord(int, KartPadRecord *); // 0x8020cc88
    void play();                               // 0x8020cd24
    void standby();                            // 0x8020cd30
    void rec();                                // 0x8020cde8
    void stop();                               // 0x8020cdf4
    void finalizeRecord(int, RaceTime);        // 0x8020ce00
    void initRecord();                         // 0x8020ce6c
    void line(u8, KartPadData *);              // 0x8020ce9c
    void framework();                          // 0x8020d068
    void nextFrame();                          // 0x8020d1c8

    // Inline/Unused
    KartPadRecord *getRecord(int no);
    KartPadRecord *getGhostRecord(u8 no);
    void playGhost();
    // Inline
    u32 getFrame() { return mFrame; };
    void setFrame(u32 frame) { mFrame = frame; }

    static PadRecorder *mspRecorder;
private:
    u32 mFrame;
    PadState mState;
    KartPadData mPadData[NUM_PLAYERPADS];
    JUTGamePad::CButton mButton[NUM_PLAYERPADS];
    KartPadRecord *mRecord[NUM_PLAYERPADS];
    KartGamePad *mGhostPad[NUM_GHOSTPADS];
    KartPadRecord *mGhostRecord[NUM_GHOSTPADS];
    JUTGamePad::CButton mGhostButton[NUM_GHOSTPADS];
}; // class PadRecorder

#endif // PADRECORDER_H