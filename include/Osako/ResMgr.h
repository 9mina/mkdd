#ifndef RESMGR_H
#define RESMGR_H

#include "JSystem/JKernel/JKRArchive.h"
#include "JSystem/JKernel/JKRHeap.h"
#include "Kaneshige/Course/Course.h"
#include "Kaneshige/RaceInfo.h"
#include "types.h"

namespace ResMgr { // Autogenerated
    // Global
    enum CourseDataId {
        COURSE_BMD,
        COURSE_BCO,
        COURSE_BOL,
        COURSE_BTK_1,
        COURSE_BTK_2,
        COURSE_BTK_3,
        COURSE_BTP,
        COURSE_BRK,
        SKY_BMD,
        SKY_BTK,
        SKY_BRK,
        MAP_BTI,
        NAME_BTI
    };
    enum ArchiveId {
        mcArcMRAM,
        mcArcMRAMLoc,
        mcArcARAM,
        mcArcCourse,
        mcArcSystem, // the Arc file hidden in the dol
        mcArcRace2D,
        mcArcAward,
        mcArcAward2D, 
        mcArcOpening,
        mcArcMax // Not sure about this one
    };

    void getCrsArcName(ECourseID); // 0x801fc5dc
    void create(JKRHeap *); // 0x801fc860
    void loadKeepTask(void *); // 0x801fc940
    void loadCourseTask(void *); // 0x801fcbe8
    void loadAwardTask(void *); // 0x801fcda4
    void loadOpeningTask(void *); // 0x801fcf20
    void loadKeepData(); // 0x801fcf84
    //void loadCourseData(ECourseID, CourseOrder); // 0x801fcff4
    void loadAwardData(ERaceGpCup, JKRHeap *); // 0x801fd098
    void loadOpeningData(JKRHeap *); // 0x801fd128
    void isFinishLoadingArc(ArchiveId); // 0x801fd1a4
    void isLoadingArc(ArchiveId); // 0x801fd1c0
    //void getPtr(KartDataId, EKartID); // 0x801fd1dc
    //void getPtr(DriverDataId, DriverId); // 0x801fd4dc
    //void getPtr(ShadowDataId, EKartID); // 0x801fd6ac
    void *getPtr(CourseDataId); // 0x801fd8e8
    //void getPtr(MessageDataId); // 0x801fda40
    void *getPtr(ArchiveId, const char *); // 0x801fdb70
    void getResSize(ArchiveId, const void *); // 0x801fdc20
    //void readResourceAsync(void *, unsigned long, char *, char *, AramAsyncState *); // 0x801fdcd0
    void readAnmResTask(void *); // 0x801fddb4
    void findResource(ArchiveId, char *); // 0x801fde70
    void isFinishLoadingAram(); // 0x801fdf2c

    inline void * getArchive(ArchiveId id) /*{ return mspaLoader[(int)id] }*/;

    extern JKRMemArchive * mspaLoader[];

    extern JKRSolidHeap *mspKeepHeap;
    extern JKRSolidHeap *mspCourseHeap;
    extern JKRHeap *mspAwardHeap;
    extern JKRHeap *mspOpeningHeap;

    /*void mspaLoader; // 0x803fe2f8
    void msaAramResArg; // 0x803fe95c
    void msCupID; // 0x80414858
    void msUsedArgArray; // 0x8041485c
    void msLoadFlag; // 0x80416930
    void msLoadingFlag; // 0x80416934
    void msRequestLoadingKeepData; // 0x80416938
    void msCourseID; // 0x8041693c
    void msCourseOrder; // 0x80416940
    void msMountCourseID; // 0x80416944
    void msMountCourseOrder; // 0x80416948
    void mspCourseName; // 0x8041694c
    void mspStaffGhost; // 0x80416950
    void msFreeArgArray; // 0x80416954
    void msAramTaskNum; // 0x80416958*/
    // Inline/Unused
    //void getAwardArcName(ERaceGpCup);
    //void getCrsDataName(CourseDataId);
    //void getKartName(EKartID);
    //void getKartDataName(KartDataId);
    //void getDriverName(DriverId);
    //void getDriverDataName(DriverDataId);
    //void getShadowDataName(ShadowDataId);
    //void getMsgDataName(MessageDataId);
    //void mscKeepHeapSize;
    //void mscCourceHeapSize;
}; // namespace ResMgr
#endif // RESMGR_H