#ifndef RIVALSPEEDCTRL_H
#define RIVALSPEEDCTRL_H

#include <JSystem/JKernel/JKRDisposer.h>

#include "Sato/RivalCtrlBase.h"
#include "Sato/RivalKart.h"

class RivalSpeedCtrl : RivalCtrlBase, JKRDisposer
{ // Autogenerated
public:
    RivalSpeedCtrl(RivalKart *);     // 0x8028460c
    static void StartInit();         // 0x80284b84
    static void ResetInit();         // 0x80284d24
    static void LoadCrsLevelParam(); // 0x80284de0
    void InitRndStartRank();         // 0x80284ed8
    void getNowCrsIndex();           // 0x802850d0    
    void init();                     // 0x80285210
    void doPlayerDistSpeedCtrl();    // 0x802857a8
    void doCurveDegSpdCtrl();        // 0x80285944
    void doRankSpdCtrl();            // 0x80285abc
    void resetRaceStrengthening();   // 0x80285fc4
    void clampMaxSpeed();            // 0x8028603c
    static f32 sCrsLevelParam;       // 0x803a2794
    static f32 sStartRankList;       // 0x804139f4
    static f32 *sEngineParamPtr;     // 0x80415090
    static int sComStrengthState;    // 0x80415094
    static int sRivalGPPoint;        // 0x80415098
    static void *sStartRankPtr;      // 0x80416d30, some JSUList, too lazy to implement properly now
    static u8 sConfusedFightModeFlg; // 0x80416d34
    static u8 sComWeakPointSwapFlg;  // 0x80416d35

    // Inline/Unused
    // void JSULink<RivalStartRankParam>::~JSULink();
    // void initCalc();
    // void calcOffsetMaxSpd();
    // void doAccident();
    // void doUsually();
    // void calcDriftSpdRatio();

    // Vtable
    virtual ~RivalSpeedCtrl() {}       // 0x80284b04, 14
    virtual void reset();              // 0x802851a4, 18
    virtual void doSpeedCtrl();        // 0x80285494, 1c
    virtual void stop();               // 0x802868b4, 20
    virtual void stop_immediately() {} // 0x801cf6b8, 24
    virtual void set_speeddown() {}    // 0x801cf228, 28
    virtual void doAccelCtrl();        // 0x80285884, 2c
    virtual void initStartDash();      // 0x802852e4, 30

    f32 getMaxSpeed() const { return mMaxSpeed; }
    f32 getOffsetMaxSpeed() const { return mOffsetMaxSpeed; }
    void setMaxSpd(const float &max) { mMaxSpeed = max; }

    u8 _20[0x34 - 0x20];
    f32 mMaxSpeed; // 34
    u8 _38[0x3c - 0x38];
    f32 mOffsetMaxSpeed;
    u8 _40[0x4c - 0x40];
}; // Size: 0x4c

class RivalAwardDemoSpeedCtrl : public RivalSpeedCtrl
{
public:
    RivalAwardDemoSpeedCtrl(RivalKart *);
    void reset();
    virtual void initStartDash();
    virtual void doAccelCtrl();
    void doAccelMaxSpdCtrl();
    void doSpeedCtrl();

    void stop(); // 0x80286730

    void stop_immediately(); // 0x802867f8

    u8 _4c[0x4];
};

class RivalAwardDemo2ndSpeedCtrl : public RivalAwardDemoSpeedCtrl
{
public:
    RivalAwardDemo2ndSpeedCtrl(RivalKart *);
    void reset();
    void doAccelMaxSpdCtrl();
    void doAccelCtrl();

    virtual void set_speeddown();                  // 0x802867ec
    virtual ~RivalAwardDemo2ndSpeedCtrl(); // 0x80286804

    u8 _50[0x8];
};

class RivalStaffRollDemoSpeedCtrl : public RivalAwardDemoSpeedCtrl
{
public:
    RivalStaffRollDemoSpeedCtrl(RivalKart *);
    void reset();
    void doSpeedCtrl();
    void stop_immediately();                // 0x80286724
    virtual ~RivalStaffRollDemoSpeedCtrl(); // 0x8028673c
    u8 _50[0x4];
};

// Inline function in TU

// void RivalBodyCtrl::getKartTotalDist(int); // 0x80285fb0
// virtual JSUList<RivalStartRankParam>::~JSUList()  // 0x802869e8

#endif // RIVALSPEEDCTRL_H
