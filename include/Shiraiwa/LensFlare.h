#ifndef LENSFLARE_H
#define LENSFLARE_H

#include "JSystem/JUtility/TColor.h"
#include "types.h"

#include "Sato/GeographyObj.h"

// TODO
class TLensFlare;

class TLensFlareSupervisor : public GeoObjSupervisor {
public:
    TLensFlareSupervisor() {}
    ~TLensFlareSupervisor();
    void entry(TLensFlare *);
    void getBufferZ(u32);
    void draw(u32);
    void setupGX();
    void load();

    // Inline
    void reset() { }
    void calc() { }

    static const char *fileName[4];
};

class TLensFlare : public TMapObjHioNode, JKRDisposer { // Autogenerated
public:
    TLensFlare(const CrsData::SObject &); // 0x802b0558
    void reset(); // 0x802b0758
    void calc(); // 0x802b086c
    void draw(u32); // 0x802b08c8

    // Inline/Unused
    void getBufferZ(u32);

    // Inline
    virtual ~TLensFlare() {}
    virtual TLensFlareSupervisor *getSupervisor() { return sSupervisor; }
    static TLensFlareSupervisor *getSupervisor() { return sSupervisor; }
private:
    static TLensFlareSupervisor *sSupervisor; // 0x80416f48
}; // class LensFlare


class TLensFlareScrn {
public:
    void calc(bool, f32);
    void frameIn();
    void frameOut();

    // Inline/Unused
    TLensFlareScrn();
    ~TLensFlareScrn();
    void init(u32, const JUTColor &, u8, u8);
    void draw();
    void setupGX();

    static u8 sAlphaAccel;
    static u8 sAlphaDecel;
    static u8 sAlphaMax;
    static u8 sAlphaMin;
};

class TFlareLine {
public:
    class TFlare {

    };

    // void __defctor() // TFlareLine.h; // 0x802b0678
    ~TFlareLine();
    void reset(u8, u8, u8, u8, u8);
    void resetFlares();
    void calc(const JGeometry::TVec3f &);
    void isInside(const JGeometry::TVec2f &);
    void setPosition(const JGeometry::TVec2f &, const JGeometry::TVec2f &);
    void draw();
    void drawFixCenter(TFlare &);

    // Inline/Unused
    TFlareLine(u32);
    void setTexture(ResTIMG **, int);
    void getBufferZ();
    f32 getAspectRate();

    static f32 sScale;
    static f32 sFlareInterval;
    static f32 sOutRadius;
    static u8 sAlpha;
    static u8 sAlphaAccel;
    static u8 sAlphaDecel;
    static f32 sScrnScaleRange;
    // void sFlareInfo;
    static JUTColor sColor;
    //void cNumFlare;
};

#endif // LENSFLARE_H
